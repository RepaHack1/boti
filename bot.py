import os
import logging
import sqlite3
from uuid import uuid4
from datetime import datetime, timedelta
from dotenv import load_dotenv
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    LabeledPrice
)
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    PreCheckoutQueryHandler,
    CallbackQueryHandler,
    ConversationHandler
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = os.getenv("BOT_TOKEN")
PROVIDER_TOKEN = os.getenv("PROVIDER_TOKEN", "")
DB = os.getenv("DB_PATH", "store.db")
ADMIN_IDS = [int(x) for x in os.getenv("ADMIN_IDS", "").split(",") if x.strip()]
PURCHASE_COOLDOWN_SECONDS = int(os.getenv("PURCHASE_COOLDOWN_SECONDS", "5"))

if not BOT_TOKEN:
    raise SystemExit("Set BOT_TOKEN env var")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# States for conversation handler
TITLE, DESC, PRICE = range(3)

# In-memory rate-limit
_last_purchase = {}

### –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
def _conn():
    return sqlite3.connect(DB)

def init_db():
    conn = _conn()
    cur = conn.cursor()
    cur.execute("""
    CREATE TABLE IF NOT EXISTS offers(
        id TEXT PRIMARY KEY, title TEXT, description TEXT, price INTEGER)
    """)
    cur.execute("""
    CREATE TABLE IF NOT EXISTS orders(
        id TEXT PRIMARY KEY,
        user_id INTEGER,
        offer_id TEXT,
        status TEXT,
        payload TEXT,
        is_demo INTEGER DEFAULT 0,
        paid_amount INTEGER DEFAULT 0,
        created_at TEXT
    )
    """)
    cur.execute("""
    CREATE TABLE IF NOT EXISTS demo_exceptions(
        user_id INTEGER PRIMARY KEY,
        granted_by INTEGER,
        granted_at TEXT
    )
    """)
    conn.commit()
    conn.close()

def add_sample_offers():
    conn = _conn()
    cur = conn.cursor()
    cur.execute("SELECT COUNT(*) FROM offers")
    if cur.fetchone()[0] == 0:
        offers = [
            (str(uuid4()), "–≠–∫—Å–ø—Ä–µ—Å—Å 3 –º–∞—Ç—á–∞", "–¢—Ä–∏ —Ñ—É—Ç–±–æ–ª—å–Ω—ã—Ö –∏—Å—Ö–æ–¥–∞", 70000),
            (str(uuid4()), "–≠–∫—Å–ø—Ä–µ—Å—Å 5 –º–∞—Ç—á–µ–π", "–ü—è—Ç—å —Ç—â–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥–æ–±—Ä–∞–Ω–Ω—ã—Ö –∏—Å—Ö–æ–¥–æ–≤", 120000)
        ]
        cur.executemany("INSERT INTO offers VALUES(?,?,?,?)", offers)
        conn.commit()
    conn.close()

### –ê–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–∏
def is_admin(user_id):
    return user_id in ADMIN_IDS

### –£—Ç–∏–ª–∏—Ç—ã
def rate_limit_ok(user_id):
    now = datetime.utcnow()
    last = _last_purchase.get(user_id)
    if last and (now - last) < timedelta(seconds=PURCHASE_COOLDOWN_SECONDS):
        return False
    _last_purchase[user_id] = now
    return True

### –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    
    if is_admin(user.id):
        keyboard = [
            [InlineKeyboardButton("üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ñ—Ñ–µ—Ä—ã", callback_data='show_offers')],
            [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data='my_orders')],
            [InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data='admin_menu')],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data='help')]
        ]
    else:
        keyboard = [
            [InlineKeyboardButton("üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ñ—Ñ–µ—Ä—ã", callback_data='show_offers')],
            [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data='my_orders')],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data='help')]
        ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    text = f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:"
    
    if update.message:
        await update.message.reply_text(text, reply_markup=reply_markup)
    else:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)

### –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é
async def admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if not is_admin(query.from_user.id):
        await query.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    
    keyboard = [
        [InlineKeyboardButton("üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞–º–∏", callback_data='manage_offers')],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')],
        [InlineKeyboardButton("üîç –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ–º–æ", callback_data='manage_demo')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        "‚öôÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=reply_markup
    )

### –†–∞–±–æ—Ç–∞ —Å –æ—Ñ—Ñ–µ—Ä–∞–º–∏
async def show_offers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    conn = _conn()
    cur = conn.cursor()
    cur.execute("SELECT id, title, price FROM offers")
    offers = cur.fetchall()
    conn.close()
    
    if not offers:
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]]
        await query.edit_message_text(
            "üì≠ –û—Ñ—Ñ–µ—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return
    
    keyboard = []
    for offer_id, title, price in offers:
        keyboard.append([
            InlineKeyboardButton(
                f"{title} ({price/100:.0f} ‚ÇΩ)",
                callback_data=f'buy_{offer_id}'
            )
        ])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        "üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ñ—Ñ–µ—Ä—ã:",
        reply_markup=reply_markup
    )

### –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏
async def buy_offer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    _, offer_id = query.data.split('_', 1)
    
    if not rate_limit_ok(query.from_user.id):
        await query.message.reply_text("‚è∞ –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    conn = _conn()
    cur = conn.cursor()
    cur.execute("SELECT title, description, price FROM offers WHERE id=?", (offer_id,))
    offer = cur.fetchone()
    conn.close()
    
    if not offer:
        await query.edit_message_text("‚ùå –û—Ñ—Ñ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    title, description, price = offer
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–º–æ-–¥–æ—Å—Ç—É–ø–∞
    is_demo = False
    conn = _conn()
    cur = conn.cursor()
    cur.execute("SELECT COUNT(*) FROM demo_exceptions WHERE user_id=?", (query.from_user.id,))
    if cur.fetchone()[0] > 0:
        is_demo = True
    conn.close()
    
    payload = str(uuid4())
    
    if is_demo:
        # –î–µ–º–æ-–¥–æ—Å—Ç—É–ø - —Å—Ä–∞–∑—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
        order_id = str(uuid4())
        conn = _conn()
        cur = conn.cursor()
        cur.execute("""
            INSERT INTO orders (id, user_id, offer_id, status, payload, is_demo, created_at)
            VALUES (?, ?, ?, 'paid', ?, 1, ?)
        """, (order_id, query.from_user.id, offer_id, payload, datetime.utcnow().isoformat()))
        conn.commit()
        conn.close()
        
        await query.edit_message_text(
            f"üéâ –î–µ–º–æ-–¥–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω!\n"
            f"üì¶ –¢–æ–≤–∞—Ä: {title}\n"
            f"‚úÖ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω"
        )
    else:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã
        try:
            await context.bot.send_invoice(
                chat_id=query.from_user.id,
                title=title,
                description=description,
                payload=payload,
                provider_token=PROVIDER_TOKEN,
                currency='RUB',
                prices=[LabeledPrice(title, price)],
                max_tip_amount=50000,
                suggested_tip_amounts=[5000, 10000, 20000, 50000]
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
            context.user_data['offer_id'] = offer_id
            context.user_data['payload'] = payload
            
        except Exception as e:
            logger.error(f"Error sending invoice: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

### –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—á–µ–∫–∞
async def checkout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.pre_checkout_query
    
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    await query.answer(ok=True)

### –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
async def successful_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    payment = update.message.successful_payment
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
    logger.info(f"–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞: {payment.total_amount} {payment.currency} "
                f"–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –∑–∞–∫–∞–∑–µ
    order_id = str(uuid4())
    offer_id = context.user_data.get('offer_id')
    
    if offer_id:
        conn = _conn()
        cur = conn.cursor()
        cur.execute("""
            INSERT INTO orders (id, user_id, offer_id, status, payload, paid_amount, created_at)
            VALUES (?, ?, ?, 'paid', ?, ?, ?)
        """, (order_id, update.effective_user.id, offer_id, payment.telegram_payment_charge_id, 
              payment.total_amount, datetime.utcnow().isoformat()))
        conn.commit()
        conn.close()
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏
    await update.message.reply_text(
        f"üéâ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"üí∞ –°—É–º–º–∞: {payment.total_amount / 100:.0f} ‚ÇΩ\n"
        f"üÜî ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {payment.telegram_payment_charge_id}\n\n"
        f"‚úÖ –î–æ—Å—Ç—É–ø –∫ —Ç–æ–≤–∞—Ä—É –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!"
    )

### –ú–æ–∏ –∑–∞–∫–∞–∑—ã
async def my_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    conn = _conn()
    cur = conn.cursor()
    cur.execute("""
        SELECT o.id, of.title, o.status, o.created_at, o.paid_amount, o.is_demo
        FROM orders o
        JOIN offers of ON o.offer_id = of.id
        WHERE o.user_id = ?
        ORDER BY o.created_at DESC
        LIMIT 10
    """, (query.from_user.id,))
    orders = cur.fetchall()
    conn.close()
    
    if not orders:
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]]
        await query.edit_message_text(
            "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return
    
    text = "üìã –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n\n"
    for order_id, title, status, created_at, paid_amount, is_demo in orders:
        demo_mark = "üéÅ " if is_demo else ""
        status_emoji = "‚úÖ" if status == "paid" else "‚ùå"
        amount = f"{paid_amount/100:.0f} ‚ÇΩ" if paid_amount else "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ"
        
        text += f"{demo_mark}{status_emoji} {title}\n"
        text += f"üí∞ {amount}\n"
        text += f"üìÖ {created_at[:10]}\n\n"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

### –ê–¥–º–∏–Ω–∫–∞ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞–º–∏
async def manage_offers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if not is_admin(query.from_user.id):
        return
    
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ—Ñ—Ñ–µ—Ä", callback_data='add_offer')],
        [InlineKeyboardButton("üìù –°–ø–∏—Å–æ–∫ –æ—Ñ—Ñ–µ—Ä–æ–≤", callback_data='list_offers')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_menu')]
    ]
    
    await query.edit_message_text(
        "üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞–º–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

### –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if not is_admin(query.from_user.id):
        return
    
    conn = _conn()
    cur = conn.cursor()
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    cur.execute("SELECT COUNT(*), SUM(paid_amount) FROM orders WHERE status = 'paid'")
    total_orders, total_revenue = cur.fetchone()
    total_revenue = total_revenue or 0
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    today = datetime.utcnow().date().isoformat()
    cur.execute("""
        SELECT COUNT(*), SUM(paid_amount) FROM orders 
        WHERE status = 'paid' AND date(created_at) = ?
    """, (today,))
    today_orders, today_revenue = cur.fetchone()
    today_revenue = today_revenue or 0
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ñ—Ñ–µ—Ä–æ–≤
    cur.execute("SELECT COUNT(*) FROM offers")
    offers_count = cur.fetchone()[0]
    
    conn.close()
    
    text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
    text += f"üì¶ –û—Ñ—Ñ–µ—Ä–æ–≤: {offers_count}\n"
    text += f"üìã –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}\n"
    text += f"üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥: {total_revenue / 100:.0f} ‚ÇΩ\n\n"
    text += f"üìÖ –°–µ–≥–æ–¥–Ω—è:\n"
    text += f"üìã –ó–∞–∫–∞–∑–æ–≤: {today_orders}\n"
    text += f"üí∞ –î–æ—Ö–æ–¥: {today_revenue / 100:.0f} ‚ÇΩ"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_menu')]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

### –ü–æ–º–æ—â—å
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    text = ("‚ÑπÔ∏è –ü–æ–º–æ—â—å:\n\n"
            "üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ñ—Ñ–µ—Ä—ã - –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –ø–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤\n"
            "üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã - –∏—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –ø–æ–∫—É–ø–æ–∫\n\n"
            "üí≥ –î–ª—è –æ–ø–ª–∞—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã\n"
            "üîê –í—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –∑–∞—â–∏—â–µ–Ω—ã Telegram Payments\n\n"
            "‚ùì –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

### –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
async def back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start(update, context)

### –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
def setup_handlers(application: Application):
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    
    # Callback handlers
    application.add_handler(CallbackQueryHandler(show_offers, pattern='^show_offers$'))
    application.add_handler(CallbackQueryHandler(buy_offer, pattern='^buy_'))
    application.add_handler(CallbackQueryHandler(my_orders, pattern='^my_orders$'))
    application.add_handler(CallbackQueryHandler(help_command, pattern='^help$'))
    application.add_handler(CallbackQueryHandler(back_to_main, pattern='^back_to_main$'))
    
    # –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
    application.add_handler(CallbackQueryHandler(admin_menu, pattern='^admin_menu$'))
    application.add_handler(CallbackQueryHandler(manage_offers, pattern='^manage_offers$'))
    application.add_handler(CallbackQueryHandler(stats, pattern='^stats$'))
    
    # –ü–ª–∞—Ç–µ–∂–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
    application.add_handler(PreCheckoutQueryHandler(checkout))
    application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment))

### –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    add_sample_offers()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = ApplicationBuilder().token(BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
    setup_handlers(application)
    
    logger.info("Bot started...")
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling(poll_interval=1.0)

if __name__ == '__main__':
    main()
