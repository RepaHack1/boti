import os
import logging
import sqlite3
from uuid import uuid4
from datetime import datetime, timedelta
from dotenv import load_dotenv
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    LabeledPrice
)
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    PreCheckoutQueryHandler,
    CallbackQueryHandler,
    ConversationHandler
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = os.getenv("BOT_TOKEN")
PROVIDER_TOKEN = os.getenv("PROVIDER_TOKEN", "")
DB = os.getenv("DB_PATH", "store.db")
ADMIN_IDS = [int(x) for x in os.getenv("ADMIN_IDS", "").split(",") if x.strip()]
PURCHASE_COOLDOWN_SECONDS = int(os.getenv("PURCHASE_COOLDOWN_SECONDS", "5"))

if not BOT_TOKEN:
    raise SystemExit("Set BOT_TOKEN env var")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# States for conversation handler
TITLE, DESC, PRICE = range(3)

# In-memory rate-limit
_last_purchase = {}

### –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
def _conn():
    return sqlite3.connect(DB)

def init_db():
    conn = _conn()
    cur = conn.cursor()
    cur.execute("""
    CREATE TABLE IF NOT EXISTS offers(
        id TEXT PRIMARY KEY, title TEXT, description TEXT, price INTEGER)
    """)
    cur.execute("""
    CREATE TABLE IF NOT EXISTS orders(
        id TEXT PRIMARY KEY,
        user_id INTEGER,
        offer_id TEXT,
        status TEXT,
        payload TEXT,
        is_demo INTEGER DEFAULT 0,
        paid_amount INTEGER DEFAULT 0,
        created_at TEXT
    )
    """)
    cur.execute("""
    CREATE TABLE IF NOT EXISTS demo_exceptions(
        user_id INTEGER PRIMARY KEY,
        granted_by INTEGER,
        granted_at TEXT
    )
    """)
    conn.commit()
    conn.close()

def add_sample_offers():
    conn = _conn()
    cur = conn.cursor()
    cur.execute("SELECT COUNT(*) FROM offers")
    if cur.fetchone()[0] == 0:
        offers = [
            (str(uuid4()), "–≠–∫—Å–ø—Ä–µ—Å—Å 3 –º–∞—Ç—á–∞", "–¢—Ä–∏ —Ñ—É—Ç–±–æ–ª—å–Ω—ã—Ö –∏—Å—Ö–æ–¥–∞", 70000),
            (str(uuid4()), "–≠–∫—Å–ø—Ä–µ—Å—Å 5 –º–∞—Ç—á–µ–π", "–ü—è—Ç—å —Ç—â–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥–æ–±—Ä–∞–Ω–Ω—ã—Ö –∏—Å—Ö–æ–¥–æ–≤", 120000)
        ]
        cur.executemany("INSERT INTO offers VALUES(?,?,?,?)", offers)
        conn.commit()
    conn.close()

### –ê–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–∏
def is_admin(user_id):
    return user_id in ADMIN_IDS

### –£—Ç–∏–ª–∏—Ç—ã
def rate_limit_ok(user_id):
    now = datetime.utcnow()
    last = _last_purchase.get(user_id)
    if last and (now - last) < timedelta(seconds=PURCHASE_COOLDOWN_SECONDS):
        return False
    _last_purchase[user_id] = now
    return True

### –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    
    if is_admin(user.id):
        keyboard = [
            [InlineKeyboardButton("üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ñ—Ñ–µ—Ä—ã", callback_data='show_offers')],
            [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data='my_orders')],
            [InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data='admin_menu')],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data='help')]
        ]
    else:
        keyboard = [
            [InlineKeyboardButton("üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ñ—Ñ–µ—Ä—ã", callback_data='show_offers')],
            [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data='my_orders')],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data='help')]
        ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    text = f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:"
    
    if update.message:
        await update.message.reply_text(text, reply_markup=reply_markup)
    else:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)

### –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é
async def admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if not is_admin(query.from_user.id):
        await query.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    
    keyboard = [
        [InlineKeyboardButton("üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞–º–∏", callback_data='manage_offers')],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')],
        [InlineKeyboardButton("üîç –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ–º–æ", callback_data='manage_demo')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        "‚öôÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=reply_markup
    )

### –†–∞–±–æ—Ç–∞ —Å –æ—Ñ—Ñ–µ—Ä–∞–º–∏
# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ü–µ–Ω—É, –æ–ø–∏—Å–∞–Ω–∏–µ —Å–∫—Ä—ã—Ç–æ –¥–æ –ø–æ–∫—É–ø–∫–∏
async def show_offers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    conn = _conn()
    cur = conn.cursor()
    cur.execute("SELECT id, title, price FROM offers")
    offers = cur.fetchall()
    conn.close()
    
    if not offers:
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]]
        await query.edit_message_text(
            "üì≠ –û—Ñ—Ñ–µ—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return
    
    keyboard = []
    for offer_id, title, price in offers:
        keyboard.append([
            InlineKeyboardButton(
                f"{title} ({price/100:.0f} b)",
                callback_data=f'buy_{offer_id}'
            )
        ])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        "üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ñ—Ñ–µ—Ä—ã:",
        reply_markup=reply_markup
    )

### –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ–º–æ
async def manage_demo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if not is_admin(query.from_user.id):
        await query.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return

    conn = _conn()
    cur = conn.cursor()
    cur.execute("SELECT user_id, granted_by, granted_at FROM demo_exceptions")
    rows = cur.fetchall()
    conn.close()

    if not rows:
        text = "üì≠ –ù–µ—Ç –≤—ã–¥–∞–Ω–Ω—ã—Ö –¥–µ–º–æ-–¥–æ—Å—Ç—É–ø–æ–≤"
    else:
        text = "üìã –°–ø–∏—Å–æ–∫ –≤—ã–¥–∞–Ω–Ω—ã—Ö –¥–µ–º–æ-–¥–æ—Å—Ç—É–ø–æ–≤:\n\n"
        for user_id, granted_by, granted_at in rows:
            granted_at_fmt = granted_at[:19].replace('T', ' ') if granted_at else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            text += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_id}  –≤—ã–¥–∞–Ω: {granted_at_fmt} (–∞–¥–º–∏–Ω ID {granted_by})\n"

    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_menu')]]

    # –í–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–∏—Å—ã–ª–∞–µ–º reply
    await query.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

### –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤

def setup_handlers(application: Application):
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))

    # Conversation –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞ (–∞–¥–º–∏–Ω)
    conv_add = ConversationHandler(
        entry_points=[CallbackQueryHandler(start_add_offer, pattern='^add_offer$')],
        states={
            TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_title)],
            DESC: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_desc)],
            PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_price)],
        },
        fallbacks=[CommandHandler('cancel', cancel_add_offer), CommandHandler('back', back_add_offer)],
        allow_reentry=True
    )
    application.add_handler(conv_add)

    # Callback handlers
    application.add_handler(CallbackQueryHandler(show_offers, pattern='^show_offers$'))
    application.add_handler(CallbackQueryHandler(buy_offer, pattern='^buy_'))
    application.add_handler(CallbackQueryHandler(my_orders, pattern='^my_orders$'))
    application.add_handler(CallbackQueryHandler(help_command, pattern='^help$'))
    application.add_handler(CallbackQueryHandler(back_to_main, pattern='^back_to_main$'))

    # –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
    application.add_handler(CallbackQueryHandler(admin_menu, pattern='^admin_menu$'))
    application.add_handler(CallbackQueryHandler(manage_offers, pattern='^manage_offers$'))
    application.add_handler(CallbackQueryHandler(stats, pattern='^stats$'))

    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ–º–æ
    application.add_handler(CallbackQueryHandler(manage_demo, pattern='^manage_demo$'))

    # –û—Ñ—Ñ–µ—Ä—ã: —Å–ø–∏—Å–æ–∫/—É–¥–∞–ª–µ–Ω–∏–µ/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ-–∑–∞–≥–ª—É—à–∫–∞
    application.add_handler(CallbackQueryHandler(list_offers_admin, pattern='^list_offers$'))
    application.add_handler(CallbackQueryHandler(delete_offer, pattern='^delete_offer_'))
    application.add_handler(CallbackQueryHandler(edit_offer_placeholder, pattern='^edit_offer_'))

    # –ü–ª–∞—Ç–µ–∂–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
    application.add_handler(PreCheckoutQueryHandler(checkout))
    application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment))

### –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Ö–µ–Ω–¥–ª–µ—Ä—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

### –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    add_sample_offers()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = ApplicationBuilder().token(BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
    setup_handlers(application)
    
    logger.info("Bot started...")
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling(poll_interval=1.0)

if __name__ == '__main__':
    main()
